─ section FATsystem parents standard_toolkit
└

─ [ DEVICE ] └

─
  BIT ::= ONE | ZERO
└

─
  ERROR ::= FileNotOnDisk | NoError
└

The char used to mark if the file is deleted
---
1110010 is E5h in hex which is the delete char for FAT 
╷
  DeleteChar, Zeros: seq( BIT )
  SectorLength: ℕ↘1↖
|
  DeleteChar = ⟨ ONE, ONE, ONE, ZERO, ZERO, ONE, ZERO, ONE  ⟩
  Zeros = ⟨ ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO  ⟩
  SectorLength = 8
└

drives - all the devices that have a fat file system in the world
partitionTables - all the partition tables for the drives in the system
binConverter - a relation that maps binary numbers (as a sequence) to their equivalent natural numbers
---
each drive must have 4 partitions and the first one must be 512 sectors long. Each sector in each partition must be 8 bits (a byte) long 
the first partition offset must be 1 (boot always at the start and index starts at 1) and there must be 4 partition offsets in exact partition table
┌ FATworld
  drives: DEVICE → seq( seq( seq( BIT ) ) )
  partitionTables: DEVICE → seq( ℕ )
  binConverter: seq( BIT ) ↔ ℕ
|
  ∀disk: ran drives ⦁ ∀part: ran disk ⦁ #part = 4 ∧ #(head part) = 512 ∧ (∀sector: ran part ⦁ #sector = SectorLength)  
  ∀offsets: ran partitionTables ⦁ offsets(1) = 1 ∧ #offsets = 4
└

┌ FATworldInit
  FATworld ′
|
  drives′ = ∅
  partitionTables′ = ∅
└

change to get the image from the other world schema

image? - the image that is being loaded into system
device? - the device that the image relates to from the world
boot, fat, root, data - temp vars to store the partitions from the image
---
the device must not be already in the system of all drives
the device must have its partition table already in the fat world
the partition table remains unchanged

all of the partitions are set to be sub sequences of the image

these sub sequences are then added to the drives relation as a fat file system
┌ ImageToFat
  ΔFATworld
  image?: seq( seq( BIT ) )
  device?: DEVICE
  boot, fat, root, data: seq( seq( BIT ) )
|
  device? ∉ dom drives
  device? ∈ dom partitionTables
  partitionTables′ = partitionTables
  binConverter′ = binConverter
  
  ∀sectorAddress: dom image? ⦁ ∃s: seq( seq( BIT ) ) | boot =  s ⦁ s = s ⊕ { sectorAddress ↦ image?(sectorAddress) } ∧ sectorAddress ≤ (partitionTables device?)(2)
  ∀sectorAddress: dom image? ⦁ ∃s: seq( seq( BIT ) ) | fat =  s ⦁ s = s ⊕ { sectorAddress ↦ image?(sectorAddress) } ∧ sectorAddress ≥ (partitionTables device?)(2) ∧ sectorAddress ≤ (partitionTables device?)(3)
  ∀sectorAddress: dom image? ⦁ ∃s: seq( seq( BIT ) ) | root =  s ⦁ s = s ⊕ { sectorAddress ↦ image?(sectorAddress) } ∧ sectorAddress ≥ (partitionTables device?)(3) ∧ sectorAddress ≤ (partitionTables device?)(4)
  ∀sectorAddress: dom image? ⦁ ∃s: seq( seq( BIT ) ) | data =  s ⦁ s = s ⊕ { sectorAddress ↦ image?(sectorAddress) } ∧ sectorAddress ≥ (partitionTables device?)(4)

  drives′ = drives ∪ { device? ↦ ⟨ boot, fat, root, data ⟩ } 
└

┌ FATtoImage
  ΞFATworld
  image!: seq( seq( BIT ) ) 
  device?: DEVICE
|
  device? ∈ dom drives
  image! = drives device?(1) ⁀ drives device?(2) ⁀ drives device?(3) ⁀ drives device?(4)
└

image? - the image that the partitions need to be found for
device? - the device that the image is on
---
the device must not already be in the partitionTables relation
the device must not already be in the drives relation
drives remains unchanged through this operation

converts the value of the byte in the numbered sectors to decimal and adds the partitions to the table relation (the first one is always 1 as it is at the start of the disk)
┌ AddPartitionTable
  ΔFATworld
  image?: seq( seq( BIT ) )
  device?: DEVICE
|
  device? ∉ dom partitionTables
  device? ∉ dom drives
  drives′ = drives
  binConverter′ = binConverter
  
   ∃part2, part3, part4: ℕ ⦁ part2 = binConverter(image? 464) ∧ part3 = binConverter(image? 480)  ∧ part4 = binConverter(image? 496)  ∧ partitionTables′ = partitionTables ∪ { device? ↦ ⟨ 1, part2, part3, part4 ⟩ }
└

device? - the device that has the file on
name? - the name of the file to delete as a sequence of bytes
---
the device must be in the fat system

All the bytes in the file name must be 8 bits long

If the file name is not in the root directory, then report the error and the drives remain unchanged
The entry in the root directory (3rd partition in the FAT disk) has its first char overwritten with the DeleteChar - drives device? 3 is the root directory in device?
┌ DeleteFile
  ΔFATworld
  device?: DEVICE
  name?: seq( seq( BIT ) )
  error!: ERROR
|
  device? ∈ dom drives
  device? ∈ dom partitionTables
  partitionTables′ = partitionTables
  binConverter′ = binConverter
  
  ∀bytes: ran name? ⦁ #bytes = SectorLength
  
  ¬( name? infix (drives device? 3) ) ⇒ error! = FileNotOnDisk ∧ drives′ = drives 
  ∃char: seq( BIT ) ⦁ (char = head name? ∧ name? infix (drives device? 3)) ⇒ error! = NoError ∧ ( ∃fileStart: ℕ ⦁ (drives device? 3) fileStart = char ∧ (drives′ device? 3) = (drives device? 3) ⊕ { fileStart ↦ DeleteChar } )

└